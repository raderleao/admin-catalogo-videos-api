
plugins {
    id 'java-conventions'
    id 'jacoco-report-aggregation'
    id 'application'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.flywaydb.flyway' version '9.11.0'
}

group 'com.raderleao.admin.catalogo.infrastructure'

bootJar {
    archiveFileName = 'application.jar'
    destinationDirectory.set(file("${rootProject.buildDir}/libs"))
}

dependencies {
    implementation(project(":domain"))
    implementation(project(":application"))

    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation('com.google.guava:guava-testlib:31.1-jre')

    implementation('mysql:mysql-connector-java')

    implementation('org.springdoc:springdoc-openapi-webmvc-core:1.7.0')
    implementation('org.springdoc:springdoc-openapi-ui:1.7.0')

    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }

    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-amqp"


    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner'

    implementation ('org.yaml:snakeyaml:1.33') {
        version {strictly("1.33")}
    }

    testImplementation(project(path: ':domain', configuration: 'testClasses'))

    testImplementation('org.flywaydb:flyway-core:')
    testImplementation('org.flywaydb:flyway-mysql')

    testImplementation('org.springframework.amqp:spring-rabbit-test:2.4.10')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    testImplementation('org.testcontainers:testcontainers-bom:1.18.0')
    testImplementation('org.testcontainers:mysql:1.18.0')
    testImplementation('org.testcontainers:junit-jupiter:1.18.0')

    testRuntimeOnly('com.h2database:h2')

}

flyway {
    url = System.getenv('FLYWAY_DB') ?: 'jdbc:mysql://localhost:3306/adm_videos'
    user = System.getenv('FLYWAY_USER') ?: 'root'
    password = System.getenv('FLYWAY_PASS') ?: '123456'
    cleanDisabled = false
}

testCodeCoverageReport {
    reports {
        xml {
            enabled true
            destination file("$rootDir/build/reports/jacoco/test/jacocoTestReport.xml")
        }

        html {
            enabled true
            destination file("$rootDir/build/reports/jacoco/test/")
        }
    }
}

tasks.named("jacocoTestReport") {
    dependsOn tasks.named("testCodeCoverageReport", JacocoReport)
}